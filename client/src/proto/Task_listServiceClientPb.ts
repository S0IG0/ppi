/**
 * @fileoverview gRPC-Web generated client stub for service.proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.24.3
// source: proto/task_list.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_task_list_pb from '../proto/task_list_pb';


export class TaskListServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateTask = new grpcWeb.MethodDescriptor(
    '/service.proto.TaskListService/CreateTask',
    grpcWeb.MethodType.UNARY,
    proto_task_list_pb.CreateTaskRequest,
    proto_task_list_pb.Task,
    (request: proto_task_list_pb.CreateTaskRequest) => {
      return request.serializeBinary();
    },
    proto_task_list_pb.Task.deserializeBinary
  );

  createTask(
    request: proto_task_list_pb.CreateTaskRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_task_list_pb.Task>;

  createTask(
    request: proto_task_list_pb.CreateTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_task_list_pb.Task) => void): grpcWeb.ClientReadableStream<proto_task_list_pb.Task>;

  createTask(
    request: proto_task_list_pb.CreateTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_task_list_pb.Task) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/service.proto.TaskListService/CreateTask',
        request,
        metadata || {},
        this.methodDescriptorCreateTask,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/service.proto.TaskListService/CreateTask',
    request,
    metadata || {},
    this.methodDescriptorCreateTask);
  }

  methodDescriptorUpdateTask = new grpcWeb.MethodDescriptor(
    '/service.proto.TaskListService/UpdateTask',
    grpcWeb.MethodType.UNARY,
    proto_task_list_pb.UpdateTaskRequest,
    proto_task_list_pb.Task,
    (request: proto_task_list_pb.UpdateTaskRequest) => {
      return request.serializeBinary();
    },
    proto_task_list_pb.Task.deserializeBinary
  );

  updateTask(
    request: proto_task_list_pb.UpdateTaskRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_task_list_pb.Task>;

  updateTask(
    request: proto_task_list_pb.UpdateTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_task_list_pb.Task) => void): grpcWeb.ClientReadableStream<proto_task_list_pb.Task>;

  updateTask(
    request: proto_task_list_pb.UpdateTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_task_list_pb.Task) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/service.proto.TaskListService/UpdateTask',
        request,
        metadata || {},
        this.methodDescriptorUpdateTask,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/service.proto.TaskListService/UpdateTask',
    request,
    metadata || {},
    this.methodDescriptorUpdateTask);
  }

  methodDescriptorListTasks = new grpcWeb.MethodDescriptor(
    '/service.proto.TaskListService/ListTasks',
    grpcWeb.MethodType.UNARY,
    proto_task_list_pb.ListTasksRequest,
    proto_task_list_pb.TaskListResponse,
    (request: proto_task_list_pb.ListTasksRequest) => {
      return request.serializeBinary();
    },
    proto_task_list_pb.TaskListResponse.deserializeBinary
  );

  listTasks(
    request: proto_task_list_pb.ListTasksRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_task_list_pb.TaskListResponse>;

  listTasks(
    request: proto_task_list_pb.ListTasksRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_task_list_pb.TaskListResponse) => void): grpcWeb.ClientReadableStream<proto_task_list_pb.TaskListResponse>;

  listTasks(
    request: proto_task_list_pb.ListTasksRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_task_list_pb.TaskListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/service.proto.TaskListService/ListTasks',
        request,
        metadata || {},
        this.methodDescriptorListTasks,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/service.proto.TaskListService/ListTasks',
    request,
    metadata || {},
    this.methodDescriptorListTasks);
  }

  methodDescriptorDeleteTask = new grpcWeb.MethodDescriptor(
    '/service.proto.TaskListService/DeleteTask',
    grpcWeb.MethodType.UNARY,
    proto_task_list_pb.DeleteTaskRequest,
    proto_task_list_pb.Task,
    (request: proto_task_list_pb.DeleteTaskRequest) => {
      return request.serializeBinary();
    },
    proto_task_list_pb.Task.deserializeBinary
  );

  deleteTask(
    request: proto_task_list_pb.DeleteTaskRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_task_list_pb.Task>;

  deleteTask(
    request: proto_task_list_pb.DeleteTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_task_list_pb.Task) => void): grpcWeb.ClientReadableStream<proto_task_list_pb.Task>;

  deleteTask(
    request: proto_task_list_pb.DeleteTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_task_list_pb.Task) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/service.proto.TaskListService/DeleteTask',
        request,
        metadata || {},
        this.methodDescriptorDeleteTask,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/service.proto.TaskListService/DeleteTask',
    request,
    metadata || {},
    this.methodDescriptorDeleteTask);
  }

}

